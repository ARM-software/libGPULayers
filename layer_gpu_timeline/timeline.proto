/*
 * SPDX-License-Identifier: MIT
 * ----------------------------------------------------------------------------
 * Copyright (c) 2025 Arm Limited
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to
 * deal in the Software without restriction, including without limitation the
 * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
 * sell copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
 * IN THE SOFTWARE.
 * ----------------------------------------------------------------------------
 *
 * Layer protocol notes:
 *
 * The layer driver will emit an ordered sequence of `TimelineRecord` messages.
 * The messages are not nested in the protocol, but the ordering allows a nested
 * structure to be recovered.
 *
 *  - `Header` messages are sent once as the first message and identify the
 *    version of the layer driver protocol used.
 *  - `DeviceMetadata` messages are sent once per VkDevice and provide
 *    metadata such as driver version.
 *  - `Frame` messages form the outer level structure; each `Frame` marks the
 *    boundary of one sequence of events and another; all subsequent messages
 *    that are not `Frame` messages are children of that `Frame`.
 *  - `Submit` messages form the next level structure within a `Frame`; all
 *    subsequent messages that are not `Submit` or `Frame` messages are children
 *    of that `Submit`.
 *  - All other messages are children of the last received `Submit`.
 *
 * `BeginRenderpass` and `ContinueRenderpass` are a special case; where a
 * `ContinueRenderpass` is seen it should be merged into the last received
 * `BeginRenderpass` within that `Submit` that has the same `tag_id` value.
 *
 * It is guaranteed that you will not receive a `ContinueRenderpass` unless the
 * proceeding `BeginRenderpass` was received (though it is valid to have a
 * sequence of `ContinueRenderpass` for the same `BeginRenderpass`).
 *
 * Therefore the sequence of messages like:
 * Frame
 * Submit
 * BeginRenderpass
 * BeginRenderpass
 * Submit
 * BeginRenderpass
 * Dispatch
 * BeginRenderpass
 * Frame
 * Submit
 * BeginRenderpass
 * Dispatch
 * BeginRenderpass
 * Submit
 * BeginRenderpass
 * ContinueRenderpass
 * BeginRenderpass
 *
 * Will become:
 *
 * +-> Frame
 * |   +-> Submit
 * |   |   +-> Renderpass
 * |   |   +-> Renderpass
 * |   +-> Submit
 * |       +-> Renderpass
 * |       +-> Dispatch
 * |       +-> Renderpass
 * +-> Frame
 *     +-> Submit
 *     |   +-> Renderpass
 *         +-> Dispatch
 *     |   +-> Renderpass
 *     +-> Submit
 *         +-> Renderpass (BeginRenderpass+ContinueRenderpass)
 *         +-> Renderpass
 *
 * !!NB!!
 * ------
 * This file is not used to generate the C++ bindings. Instead `protopuf`
 * library is used. Therefore any changes must be manually reflected in the C++
 * code. (See TimelineProtobufEncoder)
 */

syntax = "proto3";

package gpulayers.timeline;

option optimize_for = LITE_RUNTIME;

/* Possible version numbers that can be sent by the header */
enum HeaderVersionNo {
    /* The only version currently defined */
    version_1 = 0;
}

/* The connection header message sent to identify the version of the timeline protocol used. This should be sent exactly once per connection */
message Header {
    /* The only mandatory field of this message. This identifys the version. Any subsequent fields are versioned based on this.
     * All additional fields must be optional and additive (no removals) */
    HeaderVersionNo version_no = 1;
}

/* The metadata packet that is sent once for a given VkDevice, before any other packet related to that Device and describes the VkDevice / VkPhysicalDevice etc */
message DeviceMetadata {
    /* The VkDevice handle */
    uint64 id = 1;
    /* The PID of the process that the layer driver was loaded into */
    uint32 process_id = 2;
    /* The major version that came from the VkPhysicalDeviceProperties for that VkDevice */
    uint32 major_version = 3;
    /* The minor version that came from the VkPhysicalDeviceProperties for that VkDevice */
    uint32 minor_version = 4;
    /* The patch version that came from the VkPhysicalDeviceProperties for that VkDevice */
    uint32 patch_version = 5;
    /* The name that came from the VkPhysicalDeviceProperties for that VkDevice */
    string name = 6;
}

/* A frame definition message */
message Frame {
    /* The unique counter / identifier for this new frame */
    uint64 id = 1;
    /* The VkDevice that the frame belongs to */
    uint64 device = 2;
    /* The timestamp (in NS, CLOCK_MONOTONIC_RAW) of the point where QueuePresent was called */
    uint64 timestamp = 3;
}

/* A submit message */
message Submit {
    /* The timestamp of the submission (in NS, CLOCK_MONOTONIC_RAW) */
    uint64 timestamp = 1;
    /* The VkDevice that the submit belongs to */
    uint64 device = 2;
    /* The VkQueue the frame belongs to */
    uint64 queue = 3;
}

/* Enumerates the possible attachment types a render pass can have */
enum RenderpassAttachmentType {
    undefined = 0;
    color = 1;
    depth = 2;
    stencil = 3;
}

/* Describe an attachment to a render pass */
message RenderpassAttachment {
    /* The attachment type */
    RenderpassAttachmentType type = 1;
    /* For color attachments, its index, otherwise should be zero/unspecified */
    uint32 index = 2;
    /* True if the attachment was *not* loaded (this is inverted since usually things are loaded, so this saves a field in the data) */
    bool not_loaded = 3;
    /* True if the attachment was *not* stored (this is inverted since usually things are stored, so this saves a field in the data) */
    bool not_stored = 4;
    /* True if the attachment was resolved (this is *not* inverted since usually things are not resolved, so this saves a field in the data) */
    bool resolved = 5;
}

/* Start a new renderpass */
message BeginRenderpass {
    /* The unique identifier for this new renderpass */
    uint64 tag_id = 1;
    /* The dimensions of the renderpass' attachments */
    uint32 width = 2;
    uint32 height = 3;
    /* The number of drawcalls in the renderpass */
    uint32 draw_call_count = 4;
    /* The subpass count */
    uint32 subpass_count = 5;
    /* Any user defined debug labels associated with the renderpass */
    repeated string debug_label = 6;
    /* Any attachments associated with the renderpass */
    repeated RenderpassAttachment attachments = 7;
}

/* Continue a split renderpass */
message ContinueRenderpass {
    /* The unique identifier for the renderpass that is being continued */
    uint64 tag_id = 1;
    /* The number of drawcalls to add to the total in the renderpass */
    uint32 draw_call_count = 2;
    /* Any user defined debug labels to add to the renderpass */
    repeated string debug_label = 3;
}

/* A dispatch object submission */
message Dispatch {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The dimensions of the dispatch */
    int64 x_groups = 2;
    int64 y_groups = 3;
    int64 z_groups = 4;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 5;
}

/* A dispatch data graph object submission */
message DispatchDataGraph {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 2;
}

/* A trace rays object submission */
message TraceRays {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The dimensions of the operation */
    int64 x_items = 2;
    int64 y_items = 3;
    int64 z_items = 4;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 5;
}

/* Enumerates possible image transfer types */
enum ImageTransferType {
    unknown_image_transfer = 0;
    clear_image = 1;
    copy_image = 2;
    copy_buffer_to_image = 3;
    copy_image_to_buffer = 4;
}

/* An image transfer submission */
message ImageTransfer {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The number of pixels being transfered */
    int64 pixel_count = 2;
    /* The image type */
    ImageTransferType transfer_type = 3;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 4;
}


/* Enumerates possible buffer transfer types */
enum BufferTransferType {
    unknown_buffer_transfer = 0;
    fill_buffer = 1;
    copy_buffer = 2;
}

/* A buffer transfer submission */
message BufferTransfer {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The number of bytes being transferred */
    int64 byte_count = 2;
    /* The buffer type */
    BufferTransferType transfer_type = 3;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 4;
}

/* Enumerates possible acceleration structure build types */
enum AccelerationStructureBuildType
{
    unknown_as_build = 0;
    fast_build = 1;
    fast_trace = 2;
}

/* An acceleration structure build submission */
message AccelerationStructureBuild {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The number of primitives in the build */
    int64 primitive_count = 2;
    /* The build type */
    AccelerationStructureBuildType build_type = 3;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 4;
}

/* Enumerates possible acceleration structure transfer types */
enum AccelerationStructureTransferType
{
    unknown_as_transfer = 0;
    struct_to_struct = 1;
    struct_to_mem = 2;
    mem_to_struct = 3;
}

/* An acceleration structure transfer submission */
message AccelerationStructureTransfer {
    /* The unique identifier for this operation */
    uint64 tag_id = 1;
    /* The number of bytes being transferred */
    int64 byte_count = 2;
    /* The transfer type */
    AccelerationStructureTransferType transfer_type = 3;
    /* Any user defined debug labels associated with the dispatch */
    repeated string debug_label = 4;
}

/* The data payload message that wraps all other messages */
message TimelineRecord {
    Header header = 1;
    DeviceMetadata metadata = 2;
    Frame frame = 3;
    Submit submit = 4;
    BeginRenderpass renderpass = 5;
    ContinueRenderpass continue_renderpass = 6;
    Dispatch dispatch = 7;
    TraceRays trace_rays = 8;
    ImageTransfer image_transfer = 9;
    BufferTransfer buffer_transfer = 10;
    AccelerationStructureBuild acceleration_structure_build = 11;
    AccelerationStructureTransfer acceleration_structure_transfer = 12;
    DispatchDataGraph dispatch_data_graph = 13;
}
