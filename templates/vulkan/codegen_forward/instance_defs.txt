#include <memory>
#include <mutex>
#include <thread>

#include "utils.hpp"
#include "instance.hpp"
#include "device.hpp"
#include "instance_functions.hpp"

extern std::mutex g_vulkanLock;

static VkLayerInstanceCreateInfo* get_chain_info(
    const VkInstanceCreateInfo* pCreateInfo,
    VkLayerFunction func
) {
    auto* info = static_cast<const VkLayerInstanceCreateInfo*>(pCreateInfo->pNext);
    while (info && !(info->sType == VK_STRUCTURE_TYPE_LOADER_INSTANCE_CREATE_INFO && info->function == func))
    {
        info = static_cast<const VkLayerInstanceCreateInfo*>(info->pNext);
    }

    return const_cast<VkLayerInstanceCreateInfo*>(info);
}

static VkLayerDeviceCreateInfo* get_chain_info(
    const VkDeviceCreateInfo* pCreateInfo,
    VkLayerFunction func
) {
    auto* info = static_cast<const VkLayerDeviceCreateInfo*>(pCreateInfo->pNext);
    while (info && !(info->sType == VK_STRUCTURE_TYPE_LOADER_DEVICE_CREATE_INFO && info->function == func))
    {
        info = static_cast<const VkLayerDeviceCreateInfo*>(info->pNext);
    }

    return const_cast<VkLayerDeviceCreateInfo*>(info);
}

{FUNCTION_DEFS}
