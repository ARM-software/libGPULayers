# SPDX-License-Identifier: MIT
# -----------------------------------------------------------------------------
# Copyright (c) 2024 Arm Limited
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to
# deal in the Software without restriction, including without limitation the
# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
# sell copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.
# -----------------------------------------------------------------------------

# Compiler accepts GNU-style command line options
set(is_gnu_fe1 "$<STREQUAL:${CMAKE_CXX_COMPILER_FRONTEND_VARIANT},GNU>")

# Compiler accepts AppleClang-style command line options, which is also GNU-style
set(is_gnu_fe2 "$<STREQUAL:${CMAKE_CXX_COMPILER_FRONTEND_VARIANT},AppleClang>")

# Compiler accepts GNU-style command line options
set(is_gnu_fe "$<OR:${is_gnu_fe1},${is_gnu_fe2}>")

# Compiler is upstream clang with the standard frontend
set(is_clang "$<AND:${is_gnu_fe},$<CXX_COMPILER_ID:Clang,AppleClang>>")

# Set output file names
if (CMAKE_BUILD_TYPE STREQUAL "Release")
    set(VK_LAYER {LAYER_NAME}_sym)
    set(VK_LAYER_STRIP lib{LAYER_NAME}.so)
else()
    set(VK_LAYER {LAYER_NAME})
endif()

# Set strings used by configure
set(LGL_LAYER_NAME_STR "{LGL_LAYER_NAME}")
set(LGL_LAYER_DESC_STR "{LGL_LAYER_DESC}")

# Vulkan layer library
configure_file(
    version.hpp.in
    version.hpp
    ESCAPE_QUOTES @ONLY)

add_library(
    ${VK_LAYER} SHARED
        device.cpp
        device_functions.cpp
        instance_functions.cpp
        entry.cpp
        instance.cpp)

target_include_directories(
    ${VK_LAYER} PRIVATE
        ${CMAKE_CURRENT_BINARY_DIR}
        .)

target_include_directories(
    ${VK_LAYER} SYSTEM PRIVATE
        ../../khronos/vulkan/include)

target_compile_options(
    ${VK_LAYER} PRIVATE
        -fvisibility=hidden
        -fvisibility-inlines-hidden
        -fno-exceptions
        -fno-rtti
        -Wall
        -Wextra
        -Wno-missing-field-initializers
        $<${is_clang}:-Wdocumentation>)

target_compile_definitions(
    ${VK_LAYER} PRIVATE
        $<$<PLATFORM_ID:Android>:VK_USE_PLATFORM_ANDROID_KHR=1>
        $<$<PLATFORM_ID:Android>:ARM_LOG_TAG="{LAYER_NAME}">)

target_link_libraries(
    ${VK_LAYER}
        $<$<PLATFORM_ID:Android>:log>)

if (CMAKE_BUILD_TYPE STREQUAL "Release")
    add_custom_command(
        TARGET "${VK_LAYER}" POST_BUILD
        DEPENDS "${VK_LAYER}"
        COMMAND ${CMAKE_STRIP}
        ARGS --strip-all -o ${VK_LAYER_STRIP} $<TARGET_FILE:${VK_LAYER}>
        COMMENT "Stripped lib${VK_LAYER}.so to ${VK_LAYER_STRIP}")
endif()
