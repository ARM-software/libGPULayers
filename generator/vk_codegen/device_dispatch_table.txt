#pragma once

// clang-format off

#include <vulkan/vulkan.h>

#include "framework/device_functions.hpp"
#include "framework/utils.hpp"
#include "utils/misc.hpp"

#if __has_include ("layer_device_functions.hpp")
    #include "layer_device_functions.hpp"
#endif

// These must be after the layer_*_functions.hpp includes
#include "framework/device_functions_query.hpp"

/**
 * @brief Interception table lookup entry.
 */
struct DeviceInterceptTableEntry
{
    /**
     * @brief The function entrypoint name.
     */
    const char* name;

    /**
     * @brief The layer function pointer.
     */
    PFN_vkVoidFunction function;

    /**
     * @brief Did the layer provide a specialization?
     */
    bool hasLayerSpecialization;
};

#define ENTRY(fnc) { STR(fnc), reinterpret_cast<PFN_vkVoidFunction>(getLayerPtr_##fnc()), hasLayerPtr_##fnc<user_tag> }

/**
 * @brief The device dispatch table used to call the driver.
 */
static const struct DeviceInterceptTableEntry deviceIntercepts[] = {
{ITABLE_MEMBERS}
};

#undef ENTRY


struct DeviceDispatchTable {
    PFN_vkGetDeviceProcAddr vkGetDeviceProcAddr;

{DTABLE_MEMBERS}
};

#define ENTRY(fnc) table.fnc = (PFN_##fnc)getProcAddr(device, STR(fnc))

/**
 * @brief Initialize the device dispatch table with driver function pointers.
 *
 * @param device        The device handle.
 * @param getProcAddr   The function getter for the driver/next layer down.
 * @param table         The table to populate.
 */
static inline void initDriverDeviceDispatchTable(
    VkDevice device,
    PFN_vkGetDeviceProcAddr getProcAddr,
    DeviceDispatchTable& table
) {
    table.vkGetDeviceProcAddr = getProcAddr;

{DTABLE_INITS}
}

#undef ENTRY

// clang-format on
