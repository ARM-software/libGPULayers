    auto* chainInfo = getChainInfo(pCreateInfo);
    auto supportedExtensions = getInstanceExtensionList(pCreateInfo);

    auto fpGetInstanceProcAddr = chainInfo->u.pLayerInfo->pfnNextGetInstanceProcAddr;
    auto fpCreateInstance = reinterpret_cast<PFN_vkCreateInstance>(fpGetInstanceProcAddr(nullptr, "vkCreateInstance"));
    if (!fpCreateInstance)
    {
        return VK_ERROR_INITIALIZATION_FAILED;
    }

    // Create a copy we can write
    VkInstanceCreateInfo newCreateInfo = *pCreateInfo;

    // Query extension state
    std::string targetExt("VK_EXT_debug_utils");
    bool targetSupported = isIn(targetExt, supportedExtensions);
    bool targetEnabled = isInExtensionList(
        targetExt,
        pCreateInfo->enabledExtensionCount,
        pCreateInfo->ppEnabledExtensionNames);

    if (!targetSupported)
    {
        LAYER_LOG("WARNING: Cannot enable additional extension: %s", targetExt.c_str());
    }

    // Enable the extension if we need to
    std::vector<const char*> newExtList;
    if (targetSupported && !targetEnabled)
    {
        LAYER_LOG("Enabling additional extension: %s", targetExt.c_str());
        newExtList = cloneExtensionList(
            pCreateInfo->enabledExtensionCount,
            pCreateInfo->ppEnabledExtensionNames);

        newExtList.push_back(targetExt.c_str());

        newCreateInfo.enabledExtensionCount = newExtList.size();
        newCreateInfo.ppEnabledExtensionNames = newExtList.data();
    }

    chainInfo->u.pLayerInfo = chainInfo->u.pLayerInfo->pNext;
    auto res = fpCreateInstance(&newCreateInfo, pAllocator, pInstance);
    if (res != VK_SUCCESS)
    {
        return res;
    }

    // Retake the lock to access layer-wide global store
    auto instance = std::make_unique<Instance>(*pInstance, fpGetInstanceProcAddr);
    {
        std::lock_guard<std::mutex> lock { g_vulkanLock };
        Instance::store(*pInstance, instance);
    }

    return VK_SUCCESS;