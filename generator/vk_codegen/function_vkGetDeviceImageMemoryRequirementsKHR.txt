    // Hold the lock to access layer-wide global store
    std::unique_lock<std::mutex> lock { g_vulkanLock };
    auto* layer = Device::retrieve(device);

    // Workaround Unreal Engine trying to invoke this via a function pointer
    // queried from a Vulkan 1.1 instance with vkGetInstanceProcAddress() using
    // a device created from a later a Vulkan 1.0 context for which the
    // function is unavailable because VK_KHR_maintenance4 requires Vulkan 1.1
    if (!layer->driver.vkGetDeviceImageMemoryRequirementsKHR)
    {
        pMemoryRequirements->memoryRequirements.size = 0;
        pMemoryRequirements->memoryRequirements.alignment = 0;
        pMemoryRequirements->memoryRequirements.memoryTypeBits = 0;
        return;
    }

    // Release the lock to call into the driver
    lock.unlock();
    layer->driver.vkGetDeviceImageMemoryRequirementsKHR(device, pInfo, pMemoryRequirements);